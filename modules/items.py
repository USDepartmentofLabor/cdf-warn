"""Define Scrapy Item corresponding to a single WARN notice entry"""

import scrapy
from scrapy.item import Item
from scrapy.loader import ItemLoader


class Entry(Item):
    # Metadata
    state_name = scrapy.Field()
    timestamp = scrapy.Field()
    url = scrapy.Field()

    # WARN notice data provided for the state, as dictionaries
    fields = scrapy.Field()
    normalized_fields = scrapy.Field() # Will be populated by get_normalized_fields


class UnpackedEntry(dict, Item):
    """Flexible Item whose items can be populated using an item loader
    
    This is used to unpack fields and normalized_fields from the Entry item,
    for use in saving these to individual CSV files. 
    
    Note that for the exporting to work, the Fields Items generated by a 
    particular state must be consistent in the actual field names!"""
    pass


def unpack_entry_fields_as_items(item):
    """Unpack dictionaries defined in Entry item (fields and normalized_fields)
    and generate new UnpackedEntry items from them

    These will be processed by separate pipelines from the Entry items
    
    Parameters:
        item:   fully loaded Entry item
        
    Returns:
        rawItem:    UnpackedEntry item with each value from item.fields in its own Field
        normItem:   UnpackedEntry item with each value from item.normalized_fields in its own Field
    """
    
    assert isinstance(item, Entry)

    rawLoader = ItemLoader(UnpackedEntry())
    normLoader = ItemLoader(UnpackedEntry())

    rawLoader.add_value('state_name', item.state_name)
    normLoader.add_value('state_name', item.state_name)

    for key, value in item.fields:
        rawLoader.add_value(key, value)
    
    for key, value in item.normalized_fields:
        normLoader.add_value(key, value)

    rawItem = rawLoader.load_item()
    normItem = normLoader.load_item()

    return (rawItem, normItem)


def get_normalized_fields(name_dict, row):
    """Grab and rename columns which are to be normalized across states
    
    Parameters:
        names:  dictionary of normalized_name:original_name pairs
        row:    pd.Series containing original_name:value fields

    Returns:
        norm_row:   pd.Series containing normalized_name:value fields
    """

    columns_to_keep = [x for x in name_dict.values() if x] # Some columns may not be present
    norm_row = row[row.index.intersection(columns_to_keep)]
    name_dict_inverse = {v: k for (k, v) in name_dict.items()}
    norm_row.rename(index=name_dict_inverse, inplace=True)

    return norm_row
    
